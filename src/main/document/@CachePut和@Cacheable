### @Cacheable 
    - 表明在进入方法之前，Spring会先去缓存服务器中查找对应key的缓存，那么Spring将不会在调用方法，而是将缓存值读出，
    返回调用者；如果还是没有找到缓存值，那么Spring就会执行方法。将最后的结果通过key保存到缓存中。
    
### @CachePut 
    - Sping 会将该方法返回的值缓存到服务器中，这里需要注意的是，Spring不会事先去缓存服务器中查找，而是直接执行方法，然后缓存。
    换句话说，该方法始终会被Spring所调用。
#### 注解 @Cacheable  和  @CachePut 的配置
    1、value：String[]类型，可以引用多个缓存管理器；使用缓存的名称
    2、condition：String类型；Spring表达式，如果表达式返回的值为false，则不会将缓存应用到方法上，true则会
    3、key：String类型；Spring表达式，可以通过它来计算对应的缓存的key
    4、unless：String类型；Spring表达式，如果表达式返回值为true，则不会将方法的结果放到缓存上
> key 和 value 这两个属性用的最多，
### @CaheEvict
    - 移除缓存对应的key的值
### @Caching
    - 这是一个分组注解器，他能够同时应用于其他缓存的注解
    
> 不适用于缓存的方法：使用缓存的前提是**高命中率**。
    如果返回值会根据查询条件而多样化，导致不确定和命中率低下，对于这样的场景，使用缓存并不能有效提高性能。
    
